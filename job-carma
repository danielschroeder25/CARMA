#!/bin/bash -l
#PBS -N carmaccm
#PBS -j oe
#PBS -q ccm_queue
#PBS -l mppwidth=24,walltime=10:00

MIN_M=1024 # All dimensions should be multiples of 64
MAX_M=1024
MIN_K=1024
MAX_K=2048
MIN_N=1024
MAX_N=1024

MIN_THREADS=12
MAX_THREADS=24 # Sweep on threads is exponential (mult factor of 2)

CARMA_DEPTH_MIN=5 # Recommended to be at least log2(# cores)
CARMA_DEPTH_MAX=5 # Sweep on depth is linear (increment of 1)

MODE=sweep
SWEEP_PATTERN=exp # Must be "exp" or "linear"
SWEEP_SUM_INCREMENT=64 # Increment for linear sweeps
SWEEP_MULT_FACTOR=2 # Multiplication factor for exponential sweeps

PRECISION=single
IN_ALGS=both
ITERATIONS=2
REPETITIONS=3

## YOU SHOLDN'T HAVE TO EDIT BELOW THIS LINE ##

cd $PBS_O_WORKDIR

host=`echo $NERSC_HOST`
if [ $host = hopper ]
then
  module swap PrgEnv-pgi PrgEnv-intel
fi

CRAY_ROOTFS=DSL

module load ccm openmpi_ccm mkl_ccm

runSweepLinear () {
  for (( m=$MIN_M; m<=$MAX_M; m+=$SWEEP_SUM_INCREMENT )); do
    for (( k=$MIN_K; k<=$MAX_K; k+=$SWEEP_SUM_INCREMENT )); do
      for (( n=$MIN_N; n<=$MAX_N; n+=$SWEEP_SUM_INCREMENT )); do
        ccmrun mpirun -np 1 ./data_gatherer-$base_alg $alg $m $k $n $threads $carma_depth $REPETITIONS
      done
    done
  done
}

runSweepExp () {
  for (( m=$MIN_M; m<=$MAX_M; m*=$SWEEP_MULT_FACTOR )); do
    for (( k=$MIN_K; k<=$MAX_K; k*=$SWEEP_MULT_FACTOR )); do
      for (( n=$MIN_N; n<=$MAX_N; n*=$SWEEP_MULT_FACTOR )); do
        ccmrun mpirun -np 1 ./data_gatherer-$base_alg $alg $m $k $n $threads $carma_depth $REPETITIONS
      done
    done
  done
}

runRandom () {
  if [ $alg == ${algs[0]} ]; then # use same dimensions if multiple algs
    m=$(((($RANDOM % (($MAX_M - $MIN_M) / 32 + 1)) * 32) + $MIN_M))
    k=$(((($RANDOM % (($MAX_K - $MIN_K) / 32 + 1)) * 32) + $MIN_K))
    n=$(((($RANDOM % (($MAX_N - $MIN_N) / 32 + 1)) * 32) + $MIN_N))
  fi
  ccmrun mpirun -np 1 ./data_gatherer-$base_alg $alg $m $k $n $threads $carma_depth $REPETITIONS
}

myExit () {
  rm -rf data_gatherer-*
  exit
}

rm -f data.csv
echo "algorithm,m,k,n,carma_depth,threads,gflop/s" > data.csv

algs=()
if [ `echo $IN_ALGS | tr [:upper:] [:lower:]` = "carma" ]; then
  for (( depth=$CARMA_DEPTH_MIN; depth<=$CARMA_DEPTH_MAX; depth+=1 )); do
      algs+=(carma_$depth)
  done
elif [ `echo $IN_ALGS | tr [:upper:] [:lower:]` = "mkl" ]; then
  algs=( mkl )
elif [ `echo $IN_ALGS | tr [:upper:] [:lower:]` = "both" ]; then
  for (( depth=$CARMA_DEPTH_MIN; depth<=$CARMA_DEPTH_MAX; depth+=1 )); do
      algs+=(carma_$depth)
  done
  algs+=(mkl)
else
  echo -e "\e[0;31mERROR: You must specify either \"carma\", \"mkl\", or \"both\" algorithms\e[0m"
  myExit
fi

if [ `echo $PRECISION | tr [:upper:] [:lower:]` = "single" ]; then
  mpicc -o data_gatherer-carma data_gatherer_single.c carma_single.c -mkl
  mpicc -o data_gatherer-mkl data_gatherer_single.c mkl_single.c -mkl
elif [ `echo $PRECISION | tr [:upper:] [:lower:]` = "double" ]; then
  mpicc -o data_gatherer-carma data_gatherer_double.c carma_double.c -mkl
  mpicc -o data_gatherer-mkl data_gatherer_double.c mkl_double.c -mkl
else
  echo -e "\e[0;31mERROR: You must specify either \"single\" or \"double\" precision\e[0m"
  myExit
fi

export MKL_DYNAMIC=FALSE

for (( i=1; i<=$ITERATIONS; i++ )); do
  for alg in "${algs[@]}"; do
    base_alg=$(cut -d "_" -f 1 <<< "$alg")
    for (( threads=$MIN_THREADS; threads<=$MAX_THREADS; threads*=2 )); do
      if [ `echo $alg | tr [:upper:] [:lower:]` = "mkl" ]; then
        export MKL_NUM_THREADS=$threads
        carma_depth=-1
      else
        export MKL_NUM_THREADS=1
        export CILK_NWORKERS=$threads
        carma_depth=$(cut -d "_" -f 2 <<< "$alg")
      fi
      if [ `echo $MODE | tr [:upper:] [:lower:]` = "sweep" ]; then
        if [ `echo $SWEEP_PATTERN | tr [:upper:] [:lower:]` = "linear" ]; then
          runSweepLinear
        elif [ `echo $SWEEP_PATTERN | tr [:upper:] [:lower:]` = "exp" ]; then
          runSweepExp
        else
          echo -e "\e[0;31mERROR: You must specify either \"linear\" or \"exp\" sweep pattern in run.sh\e[0m"
          myExit
        fi
      elif [ `echo $MODE | tr [:upper:] [:lower:]` = "random" ]; then
        runRandom
      else
        echo -e "\e[0;31mERROR: You must specify either \"random\" or \"sweep\"\e[0m"
        myExit
      fi
    done
  done
done

echo -e "\e[0;36mcollating data...\e[0m"
if [ `echo $MODE | tr [:upper:] [:lower:]` = "sweep" ]; then
  python collator.py $((iterations * repetitions))
elif [ `echo $MODE | tr [:upper:] [:lower:]` = "random" ]; then
  python collator.py $repetitions
else
  echo -e "\e[0;31mERROR: You must specify either \"random\" or \"sweep\"\e[0m"
  myExit
fi

myExit
